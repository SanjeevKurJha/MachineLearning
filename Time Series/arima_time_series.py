# -*- coding: utf-8 -*-
"""Arima_Time series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vQaaqMhb2fwJj1gbbuC0EzOjzQj8rtZU
"""

pip install pyramid-arima

pip install pmdarima

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pylab import rcParams
import seaborn as sns
import scipy
# %matplotlib inline
import scipy
import statsmodels.api as sm
from statsmodels.tsa.seasonal import seasonal_decompose
import pyramid as pm
from sklearn import metrics
from pyramid.arima import auto_arima
import warnings
warnings.filterwarnings('ignore')
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity="all"

df = sns.load_dataset("flights")
df.head()
df.tail()
df.shape
df.describe()
df.info()

#Create a pivot table
df_pivot = df.pivot('month','year','passengers')
df_pivot

plt.figure(figsize = (15,5))
sns.heatmap(df_pivot,annot = True, fmt = "d", cmap = "YlGnBu")
plt.show()

month = pd.date_range('19490131', periods = 144, freq = 'M')
month

df['datestamp']=month
df.head()

data=df.loc[:,('datestamp','passengers')]
data.head()
data.describe()

data.set_index('datestamp',inplace=True)
data.head()

plt.figure(figsize = (15,5))
plt.plot(data)
plt.xlabel('Time')
plt.ylabel('Passengers in 1000')
plt.title("Number of passengers over time")
plt.show()

decomposition=seasonal_decompose(data,model='multiplicative')

decomposition_ad=seasonal_decompose(data,model='additive')

plt.figure(figsize = (20,10))
trend=decomposition.trend
seasonal=decomposition.seasonal
residual=decomposition.resid

plt.figure(figsize = (30,15))
trend_ad=decomposition_ad.trend
seasonal_ad=decomposition_ad.seasonal
residual_ad=decomposition_ad.resid

plt.subplot(221)
plt.plot(data,color="#00b8ff",label="Original")
plt.legend(loc="best")

plt.subplot(222)
plt.plot(trend,'b',label="Trend")
plt.legend(loc="best")

plt.subplot(223)
#plt.plot(data,color="#ff00ff",label="Original")
plt.plot(seasonal,'b',label="Seasonal")
plt.legend(loc="best")

plt.subplot(224)
plt.plot(residual,'y',label="residual")
plt.legend(loc="best")

plt.tight_layout()

plt.show()

plt.subplot(221)
plt.plot(data,color="#00b8ff",label="Original")
plt.legend(loc="best")
plt.subplot(222)
plt.plot(trend_ad,'b',label="Trend")
plt.legend(loc="best")

plt.subplot(223)
#plt.plot(data,color="#ff00ff",label="Original")
plt.plot(seasonal_ad,'b',label="Seasonal")
plt.legend(loc="best")

plt.subplot(224)
plt.plot(residual_ad,'y',label="residual")
plt.legend(loc="best")

plt.tight_layout()

plt.show()

from pyramid.arima.stationarity import ADFTest
adfTest=ADFTest(alpha=0.05)
adfTest.is_stationary(data)

train, test=data[:100],data[100:]
train.shape
test.shape

plt.plot(train)
plt.plot(test)
plt.show()

Arima_model=auto_arima(train,start_p=1,start_q=1,max_p=1,max_q=1,start_P=0,start_Q=0,max_P=8,max_Q=8,m=12,seasonal=True,trace=True,d=1,D=1,error_action="warn",suppress_warnings=True,stepwise=True,random_state=20,n_fits=30)
Arima_model.summary()

predictions=pd.DataFrame(Arima_model.predict(n_periods=44),index=test.index)
predictions.columns=["Predicted_Passengers"]

plt.figure(figsize = (15,5))
plt.plot(train,label="Training")
plt.plot(test,label="Testing")
plt.plot(predictions,label="Predicted")
plt.legend(loc="upper center")
plt.show()

test["Predicted_Passengers"]=predictions
test["Error"]=test["passengers"]-test["Predicted_Passengers"]
test

metrics.mean_absolute_error(test.passengers,test.Predicted_Passengers)

metrics.mean_squared_error(test.passengers,test.Predicted_Passengers)

metrics.median_absolute_error(test.passengers,test.Predicted_Passengers)

plt.figure(figsize = (20,10))
plt.subplot(121)
plt.plot(test.Error,color="#ff33CC")
plt.title("Error Distribution OverTime")
plt.subplot(122)
scipy.stats.probplot(test.Error,plot=plt)
plt.show()

plt.figure(figsize = (20,10))
pm.autocorr_plot(test.Error)
plt.show()